package main

import (
    "fmt"
    "math"
    "sync"
)

// generator สร้างตัวเลขและส่งไปยัง channel
func generator(nums ...int) <-chan int {
    out := make(chan int)
    go func() {
        for _, n := range nums {
            out <- n
        }
        close(out)
    }()
    return out
}

// square รับตัวเลขจาก in channel, ยกกำลังสอง และส่งผลลัพธ์ไปยัง out channel
func square(in <-chan int) <-chan int {
    out := make(chan int)
    go func() {
        for n := range in {
            out <- n * n
        }
        close(out)
    }()
    return out
}

// squareRoot รับตัวเลขจาก in channel, คำนวณรากที่สอง และส่งผลลัพธ์ไปยัง out channel
func squareRoot(in <-chan int) <-chan float64 {
    out := make(chan float64)
    go func() {
        for n := range in {
            out <- math.Sqrt(float64(n))
        }
        close(out)
    }()
    return out
}

// merge รวมผลลัพธ์จากหลาย channels เข้าด้วยกัน
func merge(cs ...<-chan float64) <-chan float64 {
    var wg sync.WaitGroup
    out := make(chan float64)

    output := func(c <-chan float64) {
        for n := range c {
            out <- n
        }
        wg.Done()
    }

    wg.Add(len(cs))
    for _, c := range cs {
        go output(c)
    }

    go func() {
        wg.Wait()
        close(out)
    }()

    return out
}

func main() {
    // สร้าง pipeline
    c := generator(2, 3, 4, 5, 6, 7, 8, 9, 10)
    c1 := square(c)
    c2 := square(c)
    c3 := squareRoot(c1)
    c4 := squareRoot(c2)

    // รวม channels
    for n := range merge(c3, c4) {
        fmt.Printf("%.2f ", n)
    }
    fmt.Println()
}
